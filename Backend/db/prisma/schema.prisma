generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  password    String
  reviews     Review[]
  bookshelves Bookshelf[]
  bookStatus  BookStatus[]
  favorites   UserFavorite[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Author {
  id        Int         @id @default(autoincrement())
  name      String
  bio       String?
  imageUrl  String?
  books     BookAuthor[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Book {
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  isbn            String?        @unique
  isbn13          String?        @unique
  publicationDate DateTime?
  publisher       String?
  language        String?
  pageCount       Int?
  averageRating   Float?         @default(0)
  rating          Int            @default(0)
  image_url        String?
  book_URL         String?
  authors         BookAuthor[]
  genres          BookGenre[]
  reviews         Review[]
  bookStatuses    BookStatus[]
  bookshelves     BookshelfBook[]
  favorites       UserFavorite[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model BookAuthor {
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    Int
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  role      String?  // e.g., "Author", "Translator", "Editor", etc.
  createdAt DateTime @default(now())

  @@id([bookId, authorId])
}

model Genre {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  books     BookGenre[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model BookGenre {
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    Int
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId   Int
  createdAt DateTime @default(now())

  @@id([bookId, genreId])
}

model Review {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    Int
  comment   String
  rating    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Bookshelf {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  isPrivate   Boolean         @default(false)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  books       BookshelfBook[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@unique([userId, name])
}

model BookshelfBook {
  bookshelf   Bookshelf @relation(fields: [bookshelfId], references: [id], onDelete: Cascade)
  bookshelfId Int
  book        Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId      Int
  addedAt     DateTime  @default(now())

  @@id([bookshelfId, bookId])
}

model BookStatus {
  id         Int       @id @default(autoincrement())
  status     String    // "want_to_read", "currently_reading", "read", "dnf" (did not finish)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  book       Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId     Int
  startedAt  DateTime?
  finishedAt DateTime?
  progress   Int?      // page number or percentage
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([userId, bookId])
}

model UserFavorite {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    Int
  createdAt DateTime @default(now())

  @@id([userId, bookId])
}
